<?xml version="1.0" encoding="UTF-8"?><!--
  Copyright 2004 Outerthought bvba and Schaubroeck nv

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
--><project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>daisy</groupId>
  <artifactId>daisywiki-runtime</artifactId>
  <version>2.4.2</version>
  <name>Daisy: Daisy Wiki: Cocoon runtime</name>
  <parent>
    <groupId>daisy</groupId>
    <artifactId>daisywiki-parent</artifactId>
    <version>2.4.2</version>
  </parent>

  <properties>
    <cocoon.webapp>${project.build.directory}/cocoon/webapp</cocoon.webapp>
    <cocoon.dist.home>${basedir}/../../../../daisy-deps/cocoon-2_1_x-20070307</cocoon.dist.home>

    <cocoon.download>false</cocoon.download>
    <cocoon.get>false</cocoon.get>
    <webapp>true</webapp>
    <deployResources>true</deployResources>
  </properties>

  <dependencies>
    <!-- cocoon stuff -->
    <dependency>
      <groupId>daisy</groupId><artifactId>daisywiki-frontend</artifactId><version>${project.version}</version>
      <exclusions>
        <exclusion><groupId>commons-jxpath</groupId><artifactId>commons-jxpath</artifactId></exclusion>
        <exclusion><groupId>jaxen</groupId><artifactId>jaxen</artifactId></exclusion>
        <exclusion><groupId>excalibur-component</groupId><artifactId>excalibur-testcase</artifactId></exclusion>
        <exclusion><groupId>geronimo-spec</groupId><artifactId>geronimo-spec-javamail</artifactId></exclusion>
        <exclusion><groupId>jisp</groupId><artifactId>jisp</artifactId></exclusion>
        <exclusion><groupId>jtidy</groupId><artifactId>jtidy</artifactId></exclusion>
        <exclusion><groupId>xml-apis</groupId><artifactId>xml-apis</artifactId></exclusion>
        <exclusion><groupId>xml-apis</groupId><artifactId>xmlParserAPIs</artifactId></exclusion>
        <exclusion><groupId>commons-vfs</groupId><artifactId>commons-vfs</artifactId></exclusion>
        <exclusion><groupId>ant</groupId><artifactId>ant</artifactId></exclusion>
      </exclusions>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <configuration>
          <overwrite>true</overwrite>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>1.3</version>
        <executions>
          <execution>
            <phase>process-resources</phase>
            <goals><goal>run</goal></goals>
          </execution>
        </executions>
        <configuration>
          <tasks>
            <!-- things needed for cocoon.get -->
            <property name="commons-httpclient.jar" value="${maven.dependency.commons-httpclient.commons-httpclient.jar.path}"/>
            <property name="commons-io.jar" value="${maven.dependency.commons-io.commons-io.jar.path}"/>
            <property name="batik-all.jar" value="${maven.dependency.batik.batik-all.jar.path}"/>
            <property name="commons-cli.jar" value="${maven.dependency.commons-cli.commons-cli.jar.path}"/>
            <property name="commons-logging.jar" value="${maven.dependency.commons-logging.commons-logging.jar.path}"/>
            <property name="ehcache.jar" value="${maven.dependency.net.sf.ehcache.ehcache.jar.path}"/>
            <property name="log4j.jar" value="${maven.dependency.log4j.log4j.jar.path}"/>
            <property name="maven.build.dir" value="${project.build.directory}"/>
            <property name="project.version" value="${project.version}"/>

            <!-- build flags -->
            <property name="cocoon.download" value="${cocoon.download}"/>
            <property name="cocoon.get" value="${cocoon.get}"/>
            <property name="webapp" value="${webapp}"/>
            <property name="deployResources" value="${deployResources}"/>

            <!-- Using maven.plugin.classpath breaks the build when running mvn from the project's root.
                 See http://jira.codehaus.org/browse/MNG-1323 
            <property name="plugin_classpath" refid="maven.plugin.classpath"/>
            -->
            <!-- workaround: use recode plugin directly from the local m2 repo
             -->
            <property name="plugin_classpath" value="${settings.localRepository}/daisy/daisybuild-maven-plugin/${project.version}/daisybuild-maven-plugin-${project.version}.jar:${settings.localRepository}/org/apache/ant/ant-nodeps/1.7.1/ant-nodeps-1.7.1.jar"/>

            <!-- call ant to do all the necessary work -->
            <ant antfile="cocoon-build.xml" inheritAll="true" inheritRefs="true" target="all"/>
          </tasks>
        </configuration>
        <dependencies>
          <dependency><groupId>org.apache.ant</groupId><artifactId>ant-nodeps</artifactId><version>1.7.1</version></dependency>
          <!-- this depedency also contains the recode ant task -->
          <dependency><groupId>daisy</groupId><artifactId>daisybuild-maven-plugin</artifactId><version>${project.version}</version></dependency>
        </dependencies>
      </plugin>
      <plugin>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <phase>compile</phase>
            <goals><goal>copy-dependencies</goal></goals>
          </execution>
        </executions>
        <configuration>
          <outputDirectory>${project.build.directory}/cocoon/webapp/WEB-INF/lib</outputDirectory>
          <!--  Exclude stuff that is not needed or that is provided by cocoon.
                It would be stricter but much more verbose to do this via exclusions in the dependency tree.
          -->
          <excludeArtifactIds>avalon-framework</excludeArtifactIds>
          <excludeGroupIds>xerces,xalan,saxon,saxpath,xml-resolver,qdox,excalibur-fortress,junit,junitperf,jmock,javax.servlet</excludeGroupIds>
          <excludeScope>provided</excludeScope>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <includes>
            <include>**/*Test.java</include>
          </includes>
        </configuration>
      </plugin>
    </plugins>
  </build>
  <reporting>
    <plugins>
      <plugin>
        <artifactId>maven-changes-plugin</artifactId>
        <configuration>
          <xmlPath>${basedir}/xdocs/changes.xml</xmlPath>
        </configuration>
      </plugin>
    </plugins>
  </reporting>
  <profiles>
    <profile>
      <id>cocoon.download</id>
      <properties>
        <cocoon.download>true</cocoon.download>
        <webapp>false</webapp>
        <deployResources>false</deployResources>
      </properties>
    </profile>
    <profile>
      <id>cocoon.get</id>
      <properties>
        <cocoon.get>true</cocoon.get>
        <webapp>false</webapp>
        <deployResources>false</deployResources>
      </properties>
    </profile>
    <profile>
      <id>deployResources</id>
      <properties>
        <webapp>false</webapp>
      </properties>
      <build>
      </build>
    </profile>
    <profile>
      <!-- enables the webapp building even when one of the other profiles is activated,
           e.g. mvn install -Pcocoon.download -Pcocoon.get -Pwebapp to do everything in one go -->
      <id>webapp</id>
      <properties>
        <webapp>true</webapp>
        <deployResources>true</deployResources>
      </properties>
    </profile>
  </profiles>
</project>