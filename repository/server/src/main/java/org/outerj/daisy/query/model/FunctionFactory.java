/*
 * Copyright 2004 Outerthought bvba and Schaubroeck nv
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.outerj.daisy.query.model;

// Note: the ParseException class is generated by JavaCC
import org.outerj.daisy.query.ParseException;
import org.outerj.daisy.query.model.functions.*;

import java.util.HashMap;

public class FunctionFactory {
    private static final HashMap FUNCTIONS;
    static {
        FUNCTIONS = new HashMap();
        // string functions
        FUNCTIONS.put(LengthFunction.NAME, LengthFunction.class);
        FUNCTIONS.put(ConcatFunction.NAME, ConcatFunction.class);
        FUNCTIONS.put(LeftFunction.NAME, LeftFunction.class);
        FUNCTIONS.put(RightFunction.NAME, RightFunction.class);
        FUNCTIONS.put(SubstringFunction.NAME, SubstringFunction.class);
        FUNCTIONS.put(UpperCaseFunction.NAME, UpperCaseFunction.class);
        FUNCTIONS.put(LowerCaseFunction.NAME, LowerCaseFunction.class);
        FUNCTIONS.put(StringFunction.NAME, StringFunction.class);

        // date functions
        FUNCTIONS.put(CurrentDateFunction.NAME, CurrentDateFunction.class);
        FUNCTIONS.put(YearFunction.NAME, YearFunction.class);
        FUNCTIONS.put(MonthFunction.NAME, MonthFunction.class);
        FUNCTIONS.put(DayOfWeekFunction.NAME, DayOfWeekFunction.class);
        FUNCTIONS.put(DayOfMonthFunction.NAME, DayOfMonthFunction.class);
        FUNCTIONS.put(DayOfYearFunction.NAME, DayOfYearFunction.class);
        FUNCTIONS.put(WeekFunction.NAME, WeekFunction.class);
        FUNCTIONS.put(RelativeDateFunction.NAME, RelativeDateFunction.class);

        // datetime functions
        FUNCTIONS.put(CurrentDateTimeFunction.NAME, CurrentDateTimeFunction.class);
        FUNCTIONS.put(RelativeDateTimeFunction.NAME, RelativeDateTimeFunction.class);

        // numeric functions
        FUNCTIONS.put(RandomFunction.NAME, RandomFunction.class);
        FUNCTIONS.put(ModFunction.NAME, ModFunction.class);
        FUNCTIONS.put(AbsFunction.NAME, AbsFunction.class);
        FUNCTIONS.put(FloorFunction.NAME, FloorFunction.class);
        FUNCTIONS.put(CeilingFunction.NAME, CeilingFunction.class);
        FUNCTIONS.put(RoundFunction.NAME, RoundFunction.class);

        // other
        FUNCTIONS.put(ContextDocFunction.NAME, ContextDocFunction.class);
        FUNCTIONS.put(LinkFunction.NAME, LinkFunction.class);
        FUNCTIONS.put(UserIdFunction.NAME, UserIdFunction.class);
        FUNCTIONS.put(FullTextFragmentFunction.NAME, FullTextFragmentFunction.class);
        FUNCTIONS.put(HierarchyPathFunction.NAME, HierarchyPathFunction.class);
        FUNCTIONS.put(GetLinkPathFunction.NAME, GetLinkPathFunction.class);
        FUNCTIONS.put(ReversePathFunction.NAME, ReversePathFunction.class);
    }

    public static Function createFunction(String name) throws ParseException {
        Class functionClass = (Class)FUNCTIONS.get(name);
        if (functionClass == null)
            throw new ParseException("No such function: " + name);
        try {
            return (Function)functionClass.newInstance();
        } catch (Exception e) {
            throw new ParseException("Error creating function " + name + ": " + e.toString());
        }
    }
}
